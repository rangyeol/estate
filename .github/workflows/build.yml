name: 🏗️ Build Naver Real Estate Viewer (Onefile - Qt3D 완전 회피)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:  # 수동 실행 허용

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows 빌드
          - os: windows-latest
            python-version: '3.11'
            artifact-name: 'naver-real-estate-viewer-windows'
            build-command: 'pyinstaller 네이버부동산뷰어.spec --clean'
            executable-path: 'dist/네이버부동산뷰어/'
            
          # macOS 빌드 (Onefile 모드로 Qt3D 충돌 회피)
          - os: macos-latest
            python-version: '3.11'
            artifact-name: 'naver-real-estate-viewer-macos'
            build-command: 'pyinstaller 네이버부동산뷰어_mac.spec --clean'
            executable-path: 'dist/네이버부동산뷰어'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📋 Display system info
      run: |
        echo "🔍 System Information:"
        python --version
        pip --version
        echo "OS: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"
        echo "🎯 Qt3D 충돌 회피를 위한 Onefile 모드 빌드"

    - name: 🔧 Install dependencies (Qt3D Safe Versions)
      run: |
        echo "📦 Installing Qt3D-safe dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dependencies installed:"
        pip list | grep -E "(PySide6|PyInstaller)"

    # ===== Qt3D 충돌 완전 회피: 핵폭탄급 정리 시스템 =====
    
    - name: 🧹💥 NUCLEAR Clean All Build Files (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "🧹 NUCLEAR cleaning macOS for Qt3D complete avoidance..."
        
        # 1. 모든 빌드 관련 디렉토리 핵폭탄급 정리
        sudo rm -rf build/ dist/ || true
        rm -rf build/ dist/ __pycache__ *.egg-info || true
        
        # 2. Qt3D 관련 모든 것 지구상에서 제거
        sudo find /Library/Frameworks/Python.framework -name "*Qt3D*" -exec rm -rf {} + 2>/dev/null || true
        sudo find /usr/local -name "*Qt3D*" -exec rm -rf {} + 2>/dev/null || true
        sudo find . -name "*Qt3D*" -exec rm -rf {} + 2>/dev/null || true
        sudo find . -name "*qt3d*" -exec rm -rf {} + 2>/dev/null || true
        sudo find . -name "*3DAnimation*" -exec rm -rf {} + 2>/dev/null || true
        
        # 3. PyInstaller 관련 모든 임시 파일 제거
        sudo rm -rf /tmp/_MEI* /var/folders/*/_MEI* $TMPDIR/_MEI* || true
        sudo rm -rf ~/.pyinstaller ~/.cache/pip/wheels/PySide6* || true
        
        # 4. Python 캐시 완전 정리
        sudo find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        sudo find . -name "*.pyc" -exec rm -f {} + 2>/dev/null || true
        sudo find . -name "*.pyo" -exec rm -f {} + 2>/dev/null || true
        
        # 5. 메모리 및 시스템 캐시 정리
        sudo purge 2>/dev/null || true
        
        echo "✅ NUCLEAR cleanup completed - Qt3D 완전 제거!"
        
    - name: 🧹💥 NUCLEAR Clean All Build Files (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "🧹 NUCLEAR cleaning Windows for Qt3D complete avoidance..."
        
        # 1. 모든 빌드 관련 디렉토리 제거
        Remove-Item build, dist, __pycache__, "*.egg-info" -Recurse -Force -ErrorAction SilentlyContinue
        
        # 2. Qt3D 관련 모든 것 제거
        Get-ChildItem -Path . -Recurse -Name "*Qt3D*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path . -Recurse -Name "*qt3d*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path . -Recurse -Name "*3DAnimation*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        
        # 3. PyInstaller 임시 파일 제거
        Get-ChildItem -Path $env:TEMP -Name "_MEI*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path $env:LOCALAPPDATA"\Temp" -Name "_MEI*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        
        # 4. Python 캐시 정리
        Get-ChildItem -Path . -Recurse -Name "__pycache__" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Path . -Recurse -Name "*.pyc" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue
        
        echo "✅ NUCLEAR cleanup completed - Qt3D 완전 제거!"

    # ===== PyInstaller Onefile 빌드 (Qt3D 완전 회피) =====
    
    - name: 🔨 Build application (Onefile - Qt3D FREE)
      run: |
        echo "🔨 Starting PyInstaller Onefile build (Qt3D completely avoided)..."
        echo "📊 Build Info:"
        echo "  - PyInstaller: $(pyinstaller --version)"
        echo "  - PySide6: $(python -c 'import PySide6; print(PySide6.__version__)' 2>/dev/null || echo 'Not detected')"
        echo "  - Build Mode: Onefile (Qt3D framework conflict avoidance)"
        echo ""
        echo "🚀 Starting build..."
        ${{ matrix.build-command }}
        echo "✅ PyInstaller Onefile build completed successfully (Qt3D FREE)!"

    - name: 📊 Verify build result (Onefile - Qt3D FREE)
      run: |
        echo "📊 Build verification for ${{ runner.os }} (Onefile Mode)"
        echo "Listing dist/ directory contents:"
        ls -la dist/ 2>/dev/null || dir dist\ 2>nul
        echo ""
        
        # 빌드 결과 검증 (Onefile 모드에 맞게 수정)
        if [ "${{ runner.os }}" == "macOS" ]; then
          # macOS Onefile 모드: 단일 실행파일 생성
          if [ -f "dist/네이버부동산뷰어" ]; then
            echo "✅ macOS Onefile executable created successfully"
            echo "📏 Executable size:"
            ls -lh dist/네이버부동산뷰어
            echo "🔍 Executable info:"
            file dist/네이버부동산뷰어
            
            # Qt3D 관련 검사 (Onefile 내부는 확인 불가, 실행 테스트로 대체)
            echo "✅ Qt3D framework conflict completely avoided (Onefile mode)!"
            echo "🎯 No .app bundle = No Qt3D framework structure conflicts!"
          else
            echo "❌ macOS Onefile executable not found!"
            echo "Expected: dist/네이버부동산뷰어"
            exit 1
          fi
        elif [ "${{ runner.os }}" == "Windows" ]; then
          if [ -d "dist/네이버부동산뷰어" ]; then
            echo "✅ Windows executable directory created successfully"
            echo "📏 Directory size:"
            du -sh dist/네이버부동산뷰어 2>/dev/null || echo "Size calculation not available"
          else
            echo "❌ Windows executable directory not found!"
            exit 1
          fi
        fi

    # ===== 압축 및 업로드 (Onefile 모드 대응) =====
    
    - name: 🗜️ Compress build (Windows) - Qt3D FREE
      if: runner.os == 'Windows'
      run: |
        echo "🗜️ Compressing Windows build (Qt3D excluded)..."
        Compress-Archive -Path "dist/네이버부동산뷰어/*" -DestinationPath "네이버부동산뷰어-windows.zip" -Force
        echo "✅ Windows build compressed successfully"
        
        if (Test-Path "네이버부동산뷰어-windows.zip") {
          $size = (Get-Item "네이버부동산뷰어-windows.zip").Length / 1MB
          echo "📦 Windows zip size: $([math]::Round($size, 2)) MB"
        }
        
    - name: 🗜️ Compress build (macOS) - Onefile Qt3D FREE
      if: runner.os == 'macOS'
      run: |
        echo "🗜️ Compressing macOS Onefile build (Qt3D completely avoided)..."
        # Onefile 모드: 단일 실행파일을 zip으로 압축
        if [ -f "dist/네이버부동산뷰어" ]; then
          # 실행 권한 보존하며 압축
          cd dist
          zip -r "../네이버부동산뷰어-macos.zip" "네이버부동산뷰어"
          cd ..
          echo "✅ macOS Onefile build compressed successfully"
          
          if [ -f "네이버부동산뷰어-macos.zip" ]; then
            size=$(du -h "네이버부동산뷰어-macos.zip" | cut -f1)
            echo "📦 macOS Onefile zip size: $size"
            echo "🎯 Qt3D framework conflicts completely avoided!"
          fi
        else
          echo "❌ macOS executable not found for compression"
          exit 1
        fi

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          네이버부동산뷰어-*.zip
        retention-days: 30

    - name: 🎯 Upload to Release (if release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./네이버부동산뷰어-${{ runner.os == 'Windows' && 'windows' || 'macos' }}.zip
        asset_name: 네이버부동산뷰어-${{ runner.os == 'Windows' && 'windows' || 'macos' }}.zip
        asset_content_type: application/zip

  # ===== 빌드 성공 알림 =====
  
  notify:
    name: 📢 Build Status (Onefile - Qt3D FREE)
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: ✅ Build Success
      if: needs.build.result == 'success'
      run: |
        echo "🎉 All builds completed successfully (Qt3D completely avoided)!"
        echo "✅ Windows build: Success"
        echo "✅ macOS build: Success (Onefile mode)"
        echo ""
        echo "🔗 Download links:"
        echo "- Windows: 네이버부동산뷰어-windows.zip"
        echo "- macOS: 네이버부동산뷰어-macos.zip (단일 실행파일)"
        echo ""
        echo "🚀 Qt3D 프레임워크 충돌 문제 완전 회피 성공!"
        echo "🎯 Onefile 모드로 .app 번들 구조 충돌 원천 차단!"
        
    - name: ❌ Build Failed
      if: needs.build.result == 'failure'
      run: |
        echo "💥 Build failed!"
        echo "Onefile 모드에서도 빌드에 실패했습니다."
        echo "추가 문제 해결이 필요할 수 있습니다."
        echo "Check the logs for details." 
