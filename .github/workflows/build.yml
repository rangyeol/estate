name: 🏗️ Build Naver Real Estate Viewer

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:  # 수동 실행 허용

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows 빌드
          - os: windows-latest
            python-version: '3.11'
            artifact-name: 'naver-real-estate-viewer-windows'
            build-command: 'pyinstaller 네이버부동산뷰어.spec --clean'
            executable-path: 'dist/네이버부동산뷰어/'
            
          # macOS 빌드
          - os: macos-latest
            python-version: '3.11'
            artifact-name: 'naver-real-estate-viewer-macos'
            build-command: 'pyinstaller 네이버부동산뷰어_mac.spec --clean'
            executable-path: 'dist/네이버부동산뷰어.app'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📋 Display system info
      run: |
        python --version
        pip --version
        echo "OS: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧹 Clean previous build (macOS)
      if: runner.os == 'macOS'
      run: |
        rm -rf build/
        rm -rf dist/
        
    - name: 🧹 Clean previous build (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path build) { Remove-Item build -Recurse -Force }
        if (Test-Path dist) { Remove-Item dist -Recurse -Force }

    - name: 🔨 Build application
      run: ${{ matrix.build-command }}

    - name: 📊 Check build result
      run: |
        echo "Build completed for ${{ runner.os }}"
        ls -la dist/

    - name: 🗜️ Compress build (Windows)
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path "dist/네이버부동산뷰어/*" -DestinationPath "네이버부동산뷰어-windows.zip"
        
    - name: 🗜️ Compress build (macOS)
      if: runner.os == 'macOS'
      run: |
        cd dist
        zip -r "../네이버부동산뷰어-macos.zip" "네이버부동산뷰어.app"
        cd ..

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          네이버부동산뷰어-*.zip
        retention-days: 30

    - name: 🎯 Upload to Release (if release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./네이버부동산뷰어-${{ runner.os == 'Windows' && 'windows' || 'macos' }}.zip
        asset_name: 네이버부동산뷰어-${{ runner.os == 'Windows' && 'windows' || 'macos' }}.zip
        asset_content_type: application/zip

  # 빌드 성공 알림
  notify:
    name: 📢 Build Status
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: ✅ Build Success
      if: needs.build.result == 'success'
      run: |
        echo "🎉 All builds completed successfully!"
        echo "✅ Windows build: Success"
        echo "✅ macOS build: Success"
        
    - name: ❌ Build Failed
      if: needs.build.result == 'failure'
      run: |
        echo "💥 Build failed!"
        echo "Check the logs for details."
